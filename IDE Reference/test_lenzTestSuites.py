# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestLenzTestSuites():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_loginscreen(self):
    # Test name: Log in screen
    # Step # | name | target | value
    # 1 | open | https://admin.tez.io/login | 
    self.driver.get("https://admin.tez.io/login")
    # 2 | setWindowSize | 1534x911 | 
    self.driver.set_window_size(1534, 911)
    # 3 | type | name=contact-email | anessia@teztechnology.com
    self.driver.find_element(By.NAME, "contact-email").send_keys("anessia@teztechnology.com")
    # 4 | type | name=password | Nitrogen14!
    self.driver.find_element(By.NAME, "password").send_keys("Nitrogen14!")
    # 5 | click | name=contact-email | 
    self.driver.find_element(By.NAME, "contact-email").click()
    # 6 | click | name=password | 
    self.driver.find_element(By.NAME, "password").click()
    # 7 | click | css=.group | 
    self.driver.find_element(By.CSS_SELECTOR, ".group").click()
  
  def test_createworkspace(self):
    # Test name: Create workspace
    # Step # | name | target | value
    # 1 | open | https://admin.tez.io/workspaces | 
    self.driver.get("https://admin.tez.io/workspaces")
    # 2 | setWindowSize | 1534x911 | 
    self.driver.set_window_size(1534, 911)
    # 3 | mouseOver | css=.-right-2 | 
    element = self.driver.find_element(By.CSS_SELECTOR, ".-right-2")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    # 4 | click | css=.-right-2 | 
    self.driver.find_element(By.CSS_SELECTOR, ".-right-2").click()
    # 5 | mouseOut | css=.-right-2 | 
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element, 0, 0).perform()
    # 6 | click | name=name | 
    self.driver.find_element(By.NAME, "name").click()
    # 7 | type | name=name | Automation Workspace Test 3
    self.driver.find_element(By.NAME, "name").send_keys("Automation Workspace Test 3")
    # 8 | click | css=.inline-flex:nth-child(2) | 
    self.driver.find_element(By.CSS_SELECTOR, ".inline-flex:nth-child(2)").click()
  
  def test_addusers(self):
    # Test name: add users
    # Step # | name | target | value
    # 1 | open | https://admin.tez.io/workspaces/65ce778558521dc38ff6a1fd | 
    self.driver.get("https://admin.tez.io/workspaces/65ce778558521dc38ff6a1fd")
    # 2 | setWindowSize | 1534x911 | 
    self.driver.set_window_size(1534, 911)
    # 3 | click | css=.border-transparent:nth-child(2) path | 
    self.driver.find_element(By.CSS_SELECTOR, ".border-transparent:nth-child(2) path").click()
    # 4 | click | css=.text-highlightColor > path | 
    self.driver.find_element(By.CSS_SELECTOR, ".text-highlightColor > path").click()
    # 5 | click | css=.text-regular | 
    # add users button
    self.driver.find_element(By.CSS_SELECTOR, ".text-regular").click()
    # 6 | click | css=.hover\3A cursor-pointer | 
    # add existing user button
    self.driver.find_element(By.CSS_SELECTOR, ".hover\\3A cursor-pointer").click()
    # 7 | click | css=.relative:nth-child(2) > .relative > #search | 
    self.driver.find_element(By.CSS_SELECTOR, ".relative:nth-child(2) > .relative > #search").click()
    # 8 | type | css=.relative:nth-child(2) > .relative > #search | anes
    self.driver.find_element(By.CSS_SELECTOR, ".relative:nth-child(2) > .relative > #search").send_keys("anes")
    # 9 | click | css=.focus\3Aring-highlightColor | 
    self.driver.find_element(By.CSS_SELECTOR, ".focus\\3Aring-highlightColor").click()
    # 10 | mouseOver | css=.focus\3Aring-highlightColor | 
    element = self.driver.find_element(By.CSS_SELECTOR, ".focus\\3Aring-highlightColor")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    # 11 | mouseOut | css=.focus\3Aring-highlightColor | 
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element, 0, 0).perform()
    # 12 | click | css=.relative:nth-child(2) > .relative > #search | 
    self.driver.find_element(By.CSS_SELECTOR, ".relative:nth-child(2) > .relative > #search").click()
    # 13 | click | css=.relative:nth-child(2) > .relative > #search | 
    self.driver.find_element(By.CSS_SELECTOR, ".relative:nth-child(2) > .relative > #search").click()
    # 14 | doubleClick | css=.relative:nth-child(2) > .relative > #search | 
    element = self.driver.find_element(By.CSS_SELECTOR, ".relative:nth-child(2) > .relative > #search")
    actions = ActionChains(self.driver)
    actions.double_click(element).perform()
    # 15 | type | css=.relative:nth-child(2) > .relative > #search | divi
    self.driver.find_element(By.CSS_SELECTOR, ".relative:nth-child(2) > .relative > #search").send_keys("divi")
    # 16 | sendKeys | css=.relative:nth-child(2) > .relative > #search | ${KEY_ENTER}
    self.driver.find_element(By.CSS_SELECTOR, ".relative:nth-child(2) > .relative > #search").send_keys(Keys.ENTER)
    # 17 | click | css=.focus\3Aring-highlightColor | 
    self.driver.find_element(By.CSS_SELECTOR, ".focus\\3Aring-highlightColor").click()
    # 18 | mouseOver | css=.focus\3Aring-highlightColor | 
    element = self.driver.find_element(By.CSS_SELECTOR, ".focus\\3Aring-highlightColor")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    # 19 | mouseOut | css=.focus\3Aring-highlightColor | 
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element, 0, 0).perform()
    # 20 | click | css=.border-transparent:nth-child(2) | 
    self.driver.find_element(By.CSS_SELECTOR, ".border-transparent:nth-child(2)").click()
    # 21 | mouseOver | css=.rounded-tl-md | 
    # submit
    element = self.driver.find_element(By.CSS_SELECTOR, ".rounded-tl-md")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    # 22 | click | css=.relative:nth-child(1) > .pl-4 | 
    # validating user
    self.driver.find_element(By.CSS_SELECTOR, ".relative:nth-child(1) > .pl-4").click()
    # 23 | click | css=.relative:nth-child(2) > .pl-4 > .flex | 
    self.driver.find_element(By.CSS_SELECTOR, ".relative:nth-child(2) > .pl-4 > .flex").click()
  
  def test_searchworkspace(self):
    # Test name: search workspace
    # Step # | name | target | value
    # 1 | open | https://admin.tez.io/workspaces | 
    self.driver.get("https://admin.tez.io/workspaces")
    # 2 | setWindowSize | 1534x911 | 
    self.driver.set_window_size(1534, 911)
    # 3 | click | id=search | 
    self.driver.find_element(By.ID, "search").click()
    # 4 | type | id=search | Workspace
    self.driver.find_element(By.ID, "search").send_keys("Workspace")
    # 5 | click | css=.relative:nth-child(2) > .break-all .w-\[100px\] | 
    # .relative:nth-child(2): This part selects an element with the class relative that is the second child of its parent. This selector targets the second child element among siblings with the class relative.  >: This is the child combinator in CSS, which selects elements that are direct children of a specified parent.  .break-all: This selects elements with the class break-all. It is likely being applied to enforce word wrapping behavior.  .w-[100px]: This selects elements with the class w-[100px]. It seems to be a class used to set a width of 100 pixels, although the square brackets within the class name might indicate dynamic or special handling.  Putting it all together, the CSS selector .relative:nth-child(2) > .break-all .w-[100px] selects an element that meets the following criteria:  It has the class relative. It is the second child of its parent. It is a descendant of an element with the class break-all. It has the class w-[100px]
    self.driver.find_element(By.CSS_SELECTOR, ".relative:nth-child(2) > .break-all .w-\\[100px\\]").click()
    # 6 | click | name=workspace-name | 
    # name of workspace
    self.driver.find_element(By.NAME, "workspace-name").click()
    # 7 | click | css=.relative:nth-child(1) > .break-all .w-\[100px\] | 
    # first child
    self.driver.find_element(By.CSS_SELECTOR, ".relative:nth-child(1) > .break-all .w-\\[100px\\]").click()
    # 8 | click | xpath=//span[contains(.,'Pages')] | 
    # Pages path
    self.driver.find_element(By.XPATH, "//span[contains(.,\'Pages\')]").click()
    # 9 | click | xpath=//span[contains(.,'Users')] | 
    # Users layout
    self.driver.find_element(By.XPATH, "//span[contains(.,\'Users\')]").click()
    # 10 | click | xpath=//span[contains(.,'Groups')] | 
    # Groups tab
    self.driver.find_element(By.XPATH, "//span[contains(.,\'Groups\')]").click()
    # 11 | click | xpath=//span[contains(.,'Editor Permissions')] | 
    # Editor permissions
    self.driver.find_element(By.XPATH, "//span[contains(.,\'Editor Permissions\')]").click()
    # 12 | click | xpath=//span[contains(.,'Layout & Styles')] | 
    # layout & Styles tab
    self.driver.find_element(By.XPATH, "//span[contains(.,\'Layout & Styles\')]").click()
    # 13 | click | xpath=//span[contains(.,'Settings')] | 
    # Settings tab
    self.driver.find_element(By.XPATH, "//span[contains(.,\'Settings\')]").click()
  
  def test_addingUsers(self):
    # Test name: Adding Users
    # Step # | name | target | value
    # 1 | open | https://admin.tez.io/workspaces/65d66fb458521dc38ff84bb5?tab=Users | 
    self.driver.get("https://admin.tez.io/workspaces/65d66fb458521dc38ff84bb5?tab=Users")
    # 2 | setWindowSize | 1936x1048 | 
    self.driver.set_window_size(1936, 1048)
    # 3 | click | css=.border-highlightColor > .block | 
    # Users tab button
    self.driver.find_element(By.CSS_SELECTOR, ".border-highlightColor > .block").click()
    # 4 | click | css=.-right-2 | 
    # Add users button
    self.driver.find_element(By.CSS_SELECTOR, ".-right-2").click()
    # 5 | click | css=.hover\3A cursor-pointer | 
    # Add an existing user button
    self.driver.find_element(By.CSS_SELECTOR, ".hover\\3A cursor-pointer").click()
    # 6 | click | css=.relative:nth-child(2) > .relative > #search | 
    self.driver.find_element(By.CSS_SELECTOR, ".relative:nth-child(2) > .relative > #search").click()
    # 7 | type | css=.relative:nth-child(2) > .relative > #search | Anessia@teztechnology.com
    self.driver.find_element(By.CSS_SELECTOR, ".relative:nth-child(2) > .relative > #search").send_keys("Anessia@teztechnology.com")
    # 8 | sendKeys | css=.relative:nth-child(2) > .relative > #search | ${KEY_ENTER}
    self.driver.find_element(By.CSS_SELECTOR, ".relative:nth-child(2) > .relative > #search").send_keys(Keys.ENTER)
    # 9 | click | css=.focus\3Aring-highlightColor | 
    # checkbox
    self.driver.find_element(By.CSS_SELECTOR, ".focus\\3Aring-highlightColor").click()
    # 10 | click | xpath=//div[@id='headlessui-dialog-panel-16']/div[2]/div/div[2]/div[2]/div/div/div/input | 
    # Check checkbox
    self.driver.find_element(By.XPATH, "//div[@id=\'headlessui-dialog-panel-16\']/div[2]/div/div[2]/div[2]/div/div/div/input").click()
    # 11 | click | xpath=//button[contains(.,'Submit')] | 
    # submit button
    self.driver.find_element(By.XPATH, "//button[contains(.,\'Submit\')]").click()
    # 12 | click | css=.-right-2 | 
    self.driver.find_element(By.CSS_SELECTOR, ".-right-2").click()
    # 13 | mouseOver | css=.-right-2 | 
    element = self.driver.find_element(By.CSS_SELECTOR, ".-right-2")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    # 14 | mouseOut | css=.stroke-highlightColor | 
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element, 0, 0).perform()
    # 15 | click | css=.hover\3A cursor-pointer | 
    self.driver.find_element(By.CSS_SELECTOR, ".hover\\3A cursor-pointer").click()
    # 16 | click | css=.relative:nth-child(2) > .relative > #search | 
    self.driver.find_element(By.CSS_SELECTOR, ".relative:nth-child(2) > .relative > #search").click()
    # 17 | type | css=.relative:nth-child(2) > .relative > #search | craig@teztechnology.com
    self.driver.find_element(By.CSS_SELECTOR, ".relative:nth-child(2) > .relative > #search").send_keys("craig@teztechnology.com")
    # 18 | sendKeys | css=.relative:nth-child(2) > .relative > #search | ${KEY_ENTER}
    self.driver.find_element(By.CSS_SELECTOR, ".relative:nth-child(2) > .relative > #search").send_keys(Keys.ENTER)
    # 19 | click | css=.focus\3Aring-highlightColor | 
    self.driver.find_element(By.CSS_SELECTOR, ".focus\\3Aring-highlightColor").click()
    # 20 | mouseOver | css=.focus\3Aring-highlightColor | 
    element = self.driver.find_element(By.CSS_SELECTOR, ".focus\\3Aring-highlightColor")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    # 21 | mouseOut | css=.focus\3Aring-highlightColor | 
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element, 0, 0).perform()
    # 22 | click | css=.relative:nth-child(2) > .relative > #search | 
    self.driver.find_element(By.CSS_SELECTOR, ".relative:nth-child(2) > .relative > #search").click()
    # 23 | click | css=.relative:nth-child(2) > .relative > #search | 
    self.driver.find_element(By.CSS_SELECTOR, ".relative:nth-child(2) > .relative > #search").click()
    # 24 | doubleClick | css=.relative:nth-child(2) > .relative > #search | 
    element = self.driver.find_element(By.CSS_SELECTOR, ".relative:nth-child(2) > .relative > #search")
    actions = ActionChains(self.driver)
    actions.double_click(element).perform()
    # 25 | click | css=.relative:nth-child(2) > .relative > #search | 
    self.driver.find_element(By.CSS_SELECTOR, ".relative:nth-child(2) > .relative > #search").click()
    # 26 | click | css=.relative:nth-child(2) > .relative > #search | 
    self.driver.find_element(By.CSS_SELECTOR, ".relative:nth-child(2) > .relative > #search").click()
    # 27 | doubleClick | css=.relative:nth-child(2) > .relative > #search | 
    element = self.driver.find_element(By.CSS_SELECTOR, ".relative:nth-child(2) > .relative > #search")
    actions = ActionChains(self.driver)
    actions.double_click(element).perform()
    # 28 | click | css=.relative:nth-child(2) > .relative > #search | 
    self.driver.find_element(By.CSS_SELECTOR, ".relative:nth-child(2) > .relative > #search").click()
    # 29 | type | css=.relative:nth-child(2) > .relative > #search | teztechnology
    self.driver.find_element(By.CSS_SELECTOR, ".relative:nth-child(2) > .relative > #search").send_keys("teztechnology")
    # 30 | sendKeys | css=.relative:nth-child(2) > .relative > #search | ${KEY_ENTER}
    self.driver.find_element(By.CSS_SELECTOR, ".relative:nth-child(2) > .relative > #search").send_keys(Keys.ENTER)
    # 31 | click | css=div:nth-child(17) > .cursor-pointer | 
    self.driver.find_element(By.CSS_SELECTOR, "div:nth-child(17) > .cursor-pointer").click()
    # 32 | click | css=div:nth-child(17) > .cursor-pointer | 
    self.driver.find_element(By.CSS_SELECTOR, "div:nth-child(17) > .cursor-pointer").click()
    # 33 | click | css=div:nth-child(24) > .cursor-pointer div:nth-child(1) | 
    self.driver.find_element(By.CSS_SELECTOR, "div:nth-child(24) > .cursor-pointer div:nth-child(1)").click()
    # 34 | click | css=.lg\3Apx-8 | 
    self.driver.find_element(By.CSS_SELECTOR, ".lg\\3Apx-8").click()
    # 35 | click | xpath=//button[contains(.,'Submit')] | 
    self.driver.find_element(By.XPATH, "//button[contains(.,\'Submit\')]").click()
    # 36 | mouseOver | css=div:nth-child(2) > .flex > .w-full > .group | 
    element = self.driver.find_element(By.CSS_SELECTOR, "div:nth-child(2) > .flex > .w-full > .group")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    # 37 | click | linkText=Craig McCrary | 
    self.driver.find_element(By.LINK_TEXT, "Craig McCrary").click()
    # 38 | click | linkText=Anessia Mejia-Santillana | 
    # link text lists who is already in the workspace
    self.driver.find_element(By.LINK_TEXT, "Anessia Mejia-Santillana").click()
  
